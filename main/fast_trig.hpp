/*
Copyright (c) 2021 Longhao-Chen. All rights reserved.
*/

//通过查表法计算三角函数
#include <avr/pgmspace.h>

//cos三角函数表，0-359度
//虽然只需要保存0-90的三角函数值就可以了，但那样会多一些判断步骤
//128 * 2 bytes ==> 256 bytes
const int16_t fcosTable[] PROGMEM = {
    32767,
    32727,
    32608,
    32409,
    32131,
    31775,
    31342,
    30832,
    30248,
    29590,
    28859,
    28059,
    27190,
    26255,
    25257,
    24196,
    23077,
    21902,
    20673,
    19395,
    18068,
    16698,
    15288,
    13840,
    12358,
    10847,
    9308,
    7748,
    6168,
    4574,
    2968,
    1355,
    -261,
    -1877,
    -3488,
    -5090,
    -6680,
    -8254,
    -9808,
    -11338,
    -12840,
    -14311,
    -15748,
    -17146,
    -18502,
    -19813,
    -21076,
    -22288,
    -23445,
    -24546,
    -25586,
    -26565,
    -27478,
    -28325,
    -29103,
    -29810,
    -30445,
    -31005,
    -31490,
    -31899,
    -32229,
    -32482,
    -32655,
    -32749,
    -32763,
    -32697,
    -32552,
    -32328,
    -32025,
    -31643,
    -31185,
    -30652,
    -30043,
    -29361,
    -28608,
    -27786,
    -26895,
    -25940,
    -24921,
    -23841,
    -22703,
    -21511,
    -20266,
    -18971,
    -17630,
    -16247,
    -14824,
    -13365,
    -11873,
    -10352,
    -8806,
    -7239,
    -5654,
    -4056,
    -2447,
    -833,
    783,
    2398,
    4007,
    5606,
    7191,
    8759,
    10305,
    11827,
    13319,
    14780,
    16204,
    17589,
    18931,
    20227,
    21473,
    22668,
    23807,
    24888,
    25909,
    26867,
    27759,
    28584,
    29339,
    30023,
    30634,
    31170,
    31631,
    32014,
    32319,
    32546,
    32694,
    32762,
};

//输入范围：0-127
//输出范围：-32767~32767
int16_t fastcos32767(uint8_t x)
{
	return pgm_read_word_near(fcosTable + x);
}

//输入范围：0-127
//输出范围：-32767~32767
int16_t fastsin32767(uint8_t x)
{
	//270度
	if (x < 96)
		return -pgm_read_word_near(fcosTable + x + 32);
	else
		return pgm_read_word_near(x - 32 + fcosTable);
}

//输入范围：0-127
//输出范围：-1~1
float fastcos(uint8_t x)
{
	return (float)fastcos32767(x) / 32767.;
}

//输入范围：0-127
//输出范围：-1~1
float fastsin(uint8_t x)
{
	return (float)fastsin32767(x) / 32767.;
}